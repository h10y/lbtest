[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\n\nui <- fixedPage(\n  theme = bs_theme(version = 5), # force BS v5\n  markdown(\"\n## Sticky load balancing test in R-Shiny\n\nThe purpose of this app is to determine if HTTP requests made by the client are\ncorrectly routed back to the same R process where the session resides. It\nis only useful for testing deployments that load balance traffic across more\nthan one R process.\n\nIf this test fails, it means that sticky load balancing is not working, and\ncertain Shiny functionality (like file upload/download or server-side selectize)\nare likely to randomly fail.\n    \"),\n  tags$div(\n    class = \"card\",\n    tags$div(\n      class = \"card-body font-monospace\",\n      tags$div(\"Attempts: \", tags$span(id = \"count\", \"0\")),\n      tags$div(\"Status: \", tags$span(id = \"status\")),\n      uiOutput(\"out\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  url <- session$registerDataObj(\n    name = \"test\",\n    data = list(),\n    filter = function(data, req) {\n      message(\n        \"INFO: \",\n        req$REMOTE_ADDR, \":\",\n        req$REMOTE_PORT,\n        \" - \",\n        req$REQUEST_METHOD,\n        \" /session/\",\n        session$token,\n        req$PATH_INFO,\n        req$QUERY_STRING\n      )\n      shiny:::httpResponse(\n        status = 200L,\n        content_type = \"text/html; charset=UTF-8\",\n        content = \"OK\",\n        headers = list(\"Cache-Control\" = \"no-cache\")\n      )\n    }\n  )\n  output$out <- renderUI({\n    message(\"Incoming connection\")\n    tags$script(\n      sprintf('\n    const url = \"%s\";\n    const count_el = document.getElementById(\"count\");\n    const status_el = document.getElementById(\"status\");\n    let count = 0;\n    async function check_url() {\n        count_el.innerHTML = ++count;\n        try {\n            const resp = await fetch(url);\n            if (!resp.ok) {\n                status_el.innerHTML = \"Failure!\";\n                return;\n            } else {\n                status_el.innerHTML = \"In progress\";\n            }\n        } catch(e) {\n            status_el.innerHTML = \"Failure!\";\n            return;\n        }\n\n        if (count === 100) {\n            status_el.innerHTML = \"Test complete\";\n            return;\n        }\n\n        setTimeout(check_url, 10);\n    }\n    check_url();\n            ', url)\n    )\n  })\n}\n\napp <- shinyApp(ui, server)\n","type":"text"}]
